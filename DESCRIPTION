Package: WaterDetection
Title: Water Detection for Dam level control (or lakes, bodies of water etc) using pre-processed Sentinel-2 imagery
Version: 0.0.0.9000
Authors@R: 
    person("Pedro", "Fernandes", , "pedro.pires.fernandes@gmail.com", role = c("aut", "cre"),
           comment = c(ORCID = "YOUR-ORCID-ID"))
Description: Several functions that take composite Sentinel-2 imagery (with 10 bands) and run an algorythm that detects water in a shapefile based on a combination of RGB and NDVI values. Exports pixel data as .CSV and builds time series graphs
  Natural order of operations:
  -
  1 - CheckPackages() to load and/or install any dependencies or needed packages;
  -
  2 - Define variable(s) with a list of file paths to S2A composites (for example: CompositeListYearX = list.files(path = filepath, pattern = XYZ, full.names = TRUE)), ONE FOR EACH YEAR TO CALCULATED
  -
  3 - Define variable(s) with a list of file paths to pre-calculated NDVIs using S2A composites (for example: NDVIListYearX = list.files(path = filepath, pattern = XYZ, full.names = TRUE)) ONE FOR EACH YEAR TO CALCULATED
  -
  4 - Define variable with a path to the shapefile containing the zone(s) of interest; EX: Shapefile_Path
  -
  5 - Define variable with the shapefile name; EX: ShapefileName
  -
  6 - Define list of years to use;
  -
  7 - Define path for Output;
  -
  8 - Define a list of NDVI_Threshold (currently only functional with 1 element, recommended 0);
  -
  9 - Define a list of RGMSum_Threshold (currently only functional with 1 elemental, recommended 800);
  -
  10 - CreateOutputFolders()
  -
  11 - Define path for time series graphs;
  -
  12 - Define path for time series graphs overlapped (2 graphs overlapped, just using NDVI or using the algorythm)
  -
  13 - Define export path for: NDVI_All, Composite_All, RGBSum_All, NDVI_Binary_All, RGMSum_Binary_All, Algorythm_All, NDVI_Individual, 
  Composite_Individual, RGBSum_Individual, NDVI_Binary_Individual, Algorythm_Individual, CSV_Export_Path FOR EACH YEAR TO BE INCLUDED. These folders are usually created with Step 10, they just need to be pointed to;
  -
  14 - Define export path for Individual_Shapefiles, this folder is usually created with step 10; EX: NDVI_All_Path = paste0(OutputPath, "/AA_2017/1_NDVI_Albufeiras_Todas") (OutputPath generated in step 7 and folder in step 10)
  -
  15 - Shapefile_List = CropShapefile_ExportToPath() using as arguments: path to shapefile and shapefile name from step 5 and ExportPath from step 14;
  -
  16 - VectorBuilder() using defined values in step 8 and 9 as arguments, EX: VectorBuilder(NDVI_Threshold[[1]], RGMSum_Threshold[[1]]) (arguments are a list with only 1 element);
  -
  17 - NDVI_Year_BL = BuildBrickList() using NDVIList from step 3;
  -
  18 - NDVI_Year_ZOI = CropAndMask() using NDVI_Year_BL from step 17, ShapefileName and ShapefilePath from step 4;
  -
  19 - ExportRasters() to export the NDVI for ALL ZOI, using the arguments: NDVI_Year_ZOI from step 18, NDVI_All export path  from step 13, a name for the file, a string to print as each month is exported and a string to print in the end;
  -
  20 - CreateIndividualFolders() to create individual folders for each ZOI, using the arguments: export path for NDVI_Individual from step 13 and ID_List (should be a global variable created from running step 15)
  -
  21 - NDVI_Year_IndividualZOI_ListOfLists = IndividualProduct() to cut and export the monthly NDVI for each ZOI and store them in a matrix where Matrix[[1]] is a list of monthly NDVI for ZOI 1 and Matrix[[1]][[1]]
  is the the first month of the agricultural Year X for ZOI 1 (assuming entry data is 12 months and sorted by Agricultural Year) using the arguments: NDVI_Year_ZOI from step 18, Shapefile_List from step 15, NDVI_Individual export parth from
  step 13, ID_List (global variable) from step 15, a name for each file (XXX_, as the function will attach the ZOI ID in the end), a string to print as each NDVI is exported, a string to print as each ZOI is completed and
  a string to print in the end;
  -
  22 - NDVI_Year_ZOI_Binary = ReclassRasterList() to binary reclassify the NDVI_Year_ZOI from step 18, using as arguments: NDVI_Year_ZOI from step 18, Vector1 (global variable defined in step 16), a string to print as each month is reclassified
  and a string to print in the end;
  -
  23 - ExportRasters() to export the Binary NDVI for ALL ZOI, using the arguments: NDVI_Year_ZOI_Binary from step 22, NDVI_Binary_All export path  from step 13, a name for the file, 
  a string to print as each month is exported and a string to print in the end;
  -
  24 - CreateIndividualFolders2() to create individual folders for each ZOI for the Threshold defined in step 8, using as arguments: export path for NDVI_Binary_Individual from step 13,
  ID_List (should be a global variable created from running step 15) and NDVI_Threshold[[1]] from step 8;
  -
  25 - NDVI_Binary_Year_IndividualZOI_ListofLists = IndividualProduct2() to cut and export the monthly NDVI for each ZOI and NDVI threshold (currently working for just 1) and store them in a matrix where Matrix[[1]] is a list of monthly NDVI 
  for ZOI 1 with Threshold 1 and Matrix[[1]][[1]] is the the first month of the agricultural Year X for ZOI 1 (assuming entry data is 12 months and sorted by Agricultural Year). Using as arguments:
  NDVI_Year_ZOI_Binary from step 22, Shapefile_List from step 15, export path NDVI_Binary_Individual from step 13, ID_List (should be a global variable created from running step 15), NDVI_Threshold[[1]] from step 8,
  a string for the name of the files (XXX_, as the function will paste the ZOI ID in the end), a string to print as each Binary NDVI is exported, a string to print as each ZOI is finished
  and a string to print in the end;
  -
  26 - Composite_YEAR_BL = BuildBrickList() using Composite_List_Year from step 2 to build workable bricks from the composites;
  -
  27 - Composite_YEAR_ZOI = CropAndMask() using Composite_YEAR_BL from step 26, ShapefilePath and ShapefileName from step 4 and 5 to crop and mask the composites to the ZOI(s);
  -
  28 - ExportRasters() using Composite_YEAR_ZOI, Export path for Composite_ALL, a name for the file (XXX_, as the function will attach month name to the end, 
  assuming data is 12 month and sorted by agricultural year), a string to print after each month is exported and a string to print in the end;
  -
  29 - CreateIndividualFolders() using Exportpath for Composite_Individual from step 13 and ID_List (should be a global variable created from running step 15);
  -
  30 - Composite_YEAR_IndividualZOI_ListOfLists = IndividualProduct() to cut and export the monthly Composite for each ZOI and store them in a matrix where Matrix[[1]] is a list of monthly Composite for ZOI 1 and Matrix[[1]][[1]]
  is the the first month of the agricultural Year X for ZOI 1 (assuming entry data is 12 months and sorted by Agricultural Year) using as arguments: Composite_YEAR_ZOI from step 27, Shapefile_List from step 15, Export path for
  Composite_Individual from step 13, ID_List (global variable that should be created from running step 15), a string name for the files (XXX_, as the function will attach ZOI ID and month to the end), a string to print as each
  composite is exported, a string to print as each ZOI is finished and a string to print in the end;
  -
  31 - RGBSum_YEAR_ZOI = CalculateRGBSum() using Composite_YEAR_ZOI from step 27;
  -
  32 - ExportRasters() to export RGBSum, using as arguments: RGBSum_YEAR_ZOI from step 31, export path for RGBSum_ALL from step 13, a string to print as each sum is exported and a string to print in the end;
  -
  33 - CreateIndividualFolders() using export path for RGBSum_Individual from step 13 and ID_List (global variable that should have been created after running step 15);
  -
  34 - RGBSum_YEAR_IndividualZOI_ListofLists = IndividualProduct() to cut and export the monthly RGBSum for each ZOI and store them in a matrix where Matrix[[1]] is a list of monthly RGBSum 
  for ZOI 1 and Matrix[[1]][[1]] is the the first month of the agricultural Year X for ZOI 1 (assuming entry data is 12 months and sorted by Agricultural Year). Using as arguments:
  RGBSum_YEAR_ZOI from step 31, Shapefile_List from step 15, export path for RGBSum_Individual from step 13, ID_List (global variable produced in step 15), a string to name the files (XXX_,
  as the funciton will attach the ZOI ID in the end), a string to print as each RGBSum is exported, a string to print as each ZOI is finished and a string to print in the end;
  -
  35 - RGBSum_YEAR_ZOI_Binary = ReclassRasterList() to binary reclassify the raster according to the threshold set in step 9, using as arguments: RGBSum_Year_ZOI from step 31, Vector2 (global variable
  defined in step 16), a string to print as each RGBSum is reclassified and a string to print in the end;
  -
  36 - ExportRasters() to export binary RGBSum, using as arguments: RGBSum_YEAR_ZOI_Binary from step 35, export path for RGBSum_Binary_ALL from step 13, a string name for the files (XXX_, as the function
  will attach the month to the end), a string to print as each Binary RGBSum is exported and a string to print in the end;
  -
  37 - CreateIndividualFolders2() to create individual folders for each ZOI, using as arguments: Export path for RGBSum_Binary_Individual from step 13, ID_list from step 15 and RGBSum_Threshold[[1]] from step 9;
  -
  38 -BinaryRGBSum_YEAR_ZOI_Individual_ListOfLists = IndividualProduct2() to cut and export binary RGBSum for all ZOI, using as arguments: RGBSum_YEAR_ZOI_Binary from step 35, Shapefile_List from step 15,
  export path for RGBSum_Binary_Individual from step 13, ID_list from step 15, RGBSum_Threshold[[1]] from step 9, a string for file names (XXX_, as the function will attach ZOI ID and month in the end),
  a string to print as each RGBSum is produced and exported, a string to print as each ZOI is finished and a string to print in the end;
  -
  39 - Combo_YEAR_ZOI = CalculateCombo() to use calculate a raster list with each raster having 3 values (0 = no hits on either method, 1 = hit on either the NDVI threshold or RGBSum threshold and
  2 = hit on both), using as arguments: NDVI_Year_ZOI_Binary from step 22 and RGBSum_YEAR_ZOI_Binary from step 35;
  -
  40 - Combo_YEAR_ZOI_Binary = ReclassRasterList() to reclassify the raster list from step 39 to a binary (0 = no hits or 1 hit, 1 = both hit), using as arguments: Combo_YEAR_ZOI from step 39,
  Vetor3 from step 16, a string to print as each combo is reclassified and a string to print in the end;
  -
  41 - ExportRasters() to export the Binary Combo, using as arguments: Combo_YEAR_ZOI_Binary from step 40, a string name for the files (XXX_, as the function will attach the name of the month in the end),
  a string to print as each Binary Combo is exported and a string to print in the end;
  -
  42 - CreateIndividualFolders3() to create individual folders for the combo, using as arguments: export path for Combo_Individual from step 13, ID_List from step 15, NDVI_Threshold[[1]] and RGBSum_Threshold[[1]] from step 9;
  -
  - THIS PART IS MORE COMPLEX THAN IT NEEDS TO BE, IT WORKS FOR 1 THRESHOLD EACH (NDVI AND RGBSUM) BUT IT WAS A FOUNDATION FOR HIGHER COMBINATIONS OF THRESHOLDS IN THE SAME INSTANCE
  -
  43 - Define a list for all binary combos with all thresholds, ex: BinaryCombo_YEAR_List = list();
  -
  44 - Define a list for binary combos with threshold 0, ex: BinaryCombo_YEAR_0_List = list();
  -
  45 - Define the first element of step 44's list, using step 40 variable, ex: BinaryCombo_YEAR_0_List[[1]] = Combo_YEAR_ZOI_Binary ;
  -
  46 - Introduce that list in the list defined in step 43, ex: Binary_Combo_YEAR_List[[1]] = BinaryCombo_YEAR_0_List ;
  -
  47 - BinaryCombo_YEAR_ZOI_Individual_ListofLists = IndividualProduct3() to cut and export the binary combo for all ZOI, using as arguments BinaryCombo_YEAR_List from step 43 (after 46),
  Shapefile_List from step 15, export path for Combo_Individual from step 13, ID_List from step 15, NDVI_Threshold[[1]] and RGBSuM_Threshold[[1]] from step 8 and 9, a name for the files (XXXX_,
  as the funciton will add ZOI ID and month to the end), a string to print as each combo is produced and exported, a string to print as each ZOI is complete, a string to print as all combo for all ZOI with NDVI threshold = X is produced,
  and a string to print in the end as all combo products for all ZOI and all thresholds are produced for the year X;
  -
  48 - Combo_ZOI_Dataframe_List_YEAR = GenerateCSV2() to generate and export CSV files and construct a dataframe with several attributes including pixel counts for WaterCells, NonWaterCells, TotalCells, WaterPercentage, etc.
  for the Combo (NDVI and RGBSum) using as arguments: BinaryCombo_YEAR_ZOI_Individual_ListofLists, export path for CSV from step 13, a string representing the YEAR calculated, ID_List from step 15, a string for algoritm name (ex: Combo),
  NDVI_Threshold[[1]] and RGBSum_Threshold[[1]] from step 8 and 9;
  -
  49 - (OPTIONAL if you want graphs to compare NDVI with Combo) BinaryNDVI_ZOI_Dataframe_List_YEAR = GenerateCSV() to generate and export CSV file and construct a dataframe for NDVI-only threshold; Using as arguments:
  BinaryNDVI_YEAR_ZOI_Individual_ListofLists from step 25, export path CSV from step 13, a string represeting the YEAR, ID_list from step 15, a name for the files (ex: BinaryNDVI) and NDVI_Threshold[[1]]
  -
  - REPEAT STEPS 17 (INCLUDED) TO 49 (INCLUDED) FOR EACH YEAR TO BE CALCULATED. IF YOU USED, FOR EXAMPLE, 2017-2022 YOU SHOULD HAVE 6 "Combo_ZOI_Dataframe_List_YEAR" and 6 "BinaryNDVI_ZOI_Dataframe_List_YEAR"
  - 
  50 - Define a list to include all dataframes produced; ex: Combo_ZOI_Dataframe_List_ALL = list();
  -
  51 - Introduce the dataframes in the list, in year order, ex:
  Combo_ZOI_Dataframe_List_All[[1]] = Combo_ZOI_Dataframe_List_2017
  Combo_ZOI_Dataframe_List_All[[2]] = Combo_ZOI_Dataframe_List_2018
  Combo_ZOI_Dataframe_List_All[[3]] = Combo_ZOI_Dataframe_List_2019
  Combo_ZOI_Dataframe_List_All[[4]] = Combo_ZOI_Dataframe_List_2020
  Combo_ZOI_Dataframe_List_All[[5]] = Combo_ZOI_Dataframe_List_2021
  Combo_ZOI_Dataframe_List_All[[6]] = Combo_ZOI_Dataframe_List_2022
  -
  52 - (OPTIONAL if you did step 49 and if you want graphs to compare NDVI with Combo) Do the same for BinaryNDVI, ex:
  BinaryNDVI_ZOI_Dataframe_List_All = list()
  BinaryNDVI_ZOI_Dataframe_List_All[[1]] = BinaryNDVI_ZOI_Dataframe_List_2017
  BinaryNDVI_ZOI_Dataframe_List_All[[2]] = BinaryNDVI_ZOI_Dataframe_List_2018
  BinaryNDVI_ZOI_Dataframe_List_All[[3]] = BinaryNDVI_ZOI_Dataframe_List_2019
  BinaryNDVI_ZOI_Dataframe_List_All[[4]] = BinaryNDVI_ZOI_Dataframe_List_2020
  BinaryNDVI_ZOI_Dataframe_List_All[[5]] = BinaryNDVI_ZOI_Dataframe_List_2021
  BinaryNDVI_ZOI_Dataframe_List_All[[6]] = BinaryNDVI_ZOI_Dataframe_List_2022
  -
  53 - Combo
License: MIT + file LICENSE
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.2.3
